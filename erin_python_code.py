# -*- coding: utf-8 -*-
"""Erin Python Code

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/116N186ngePFr0QqL7WTDwJUDM_TwgiZA

# import
"""

import pandas as pd
from google.colab import auth
import gspread
from gspread_dataframe import set_with_dataframe
import re
import numpy as np
import random
from datetime import datetime, timedelta

auth.authenticate_user()
from google.auth import default
creds, _ = default()
gc = gspread.authorize(creds)

"""# 1. Data Import"""

# 1. Use the existing category and keyword list as is.
category_keywords = {
    'Robotics': ['Robot vacuum', 'floor washer', 'Robot mower', 'vacuum', 'carpet cleaner', 'robots', 'robot'],
    'Smart Home': ['cameras', 'camera', 'speakers', 'speaker', 'alarm', 'doorbell', 'lock', 'light', 'smart Alexa device', 'thermostat'],
    'Mobile Devices': ['laptop', 'smartphone', 'wearable', 'watch', 'tracker', 'e-reader'],
    'Appliances': ['dishwasher', 'laundry', 'purifier', 'fan', 'heater', 'humidifier', 'air conditioner', 'stick vacuum'],
    'Home': ['chair', 'sofa', 'rug'],
    'Beauty': ['facial', 'hair', 'face', 'Dyson', 'Shark'],
    'Transport': ['Car', 'SUV', 'Bike', 'Scooter', 'carreview'],
    'Google Trends & News': ['googletrends', 'google search', 'trending searches', 'news', 'technews'],
    'Travel & Outdoors': ['travel', 'roadtrip', 'outdoor', 'trip', 'tent', 'grill', 'bag'],
    'Food & Cooking': ['food', 'cooking', 'recipe', 'blender', 'ice cream', 'slush', 'pan', 'kitchen'],
    'Channel Updates & Vlogs': ['giveaway', 'subscribers', '100k', 'live', 'community', 'members', 'vlog']
}

#2. Video Title Template
title_templates = [
    "My Honest Review of the new {}",
    "Is the {} Worth It in 2025?",
    "Unboxing the Latest {}",
    "Top 5 Features of the {}",
    "How to use the {} like a Pro",
    "{} First Impressions: Mind-Blowing!",
    "The Ultimate Guide to {}",
    "Why I Switched to the {}"
]

#3. Create dummy data (based on 100 images)
num_videos = 100
dummy_data = []

start_date = datetime.now()

for i in range(num_videos):
    category = random.choice(list(category_keywords.keys()))
    keyword = random.choice(category_keywords[category])

    template = random.choice(title_templates)
    title = template.format(keyword.title())

    # Generate realistic numerical data
    ctr = round(random.uniform(2.0, 12.0), 2)

    # Views: Most are 5 to 150,000, with a 5% chance of generating a viral video 5 to 20 times more.
    views = random.randint(500, 150000)
    if random.random() < 0.05:
        views *= random.randint(5, 20)

    # Calculating logically correct exposures
    impressions = int(views / (ctr / 100))
    if impressions == 0: impressions = views * 20 # When the click-through rate is close to 0

    # Viewing Time: Average viewing time (minutes) * Views / 60 (hours)
    avg_watch_minutes = random.uniform(2.5, 8.0)
    watch_time_hours = round((views * avg_watch_minutes) / 60, 2)

    # Subscriber count: 0.05% to 0.3% of views
    subscriber_rate = random.uniform(0.0005, 0.0030)
    subscribers = int(views * subscriber_rate)

    # Add fake dates, IDs, video lengths, etc.
    publish_time = (start_date - timedelta(days=i*3)).strftime('%b %d, %Y') # Create past videos every 3 days
    video_id = ''.join(random.choices('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', k=11))
    duration = random.randint(120, 1800) # Between 2 and 30 minutes

    dummy_data.append({
        'Content': video_id,
        'Video title': title,
        'Video publish time': publish_time,
        'Duration': duration,
        'Views': views,
        'Watch time (hours)': watch_time_hours,
        'Subscribers': subscribers,
        'Impressions': impressions,
        'Impressions click-through rate (%)': ctr
    })

df_videos = pd.DataFrame(dummy_data)

print("Portfolio-ready dummy data has been successfully generated!")

df_videos.head()

"""# 2. Data Preprocessing and Categorization"""

category_map = {category: [kw.lower() for kw in keywords] for category, keywords in category_keywords.items()}

def assign_category(title):
    if not isinstance(title, str):
        return 'Uncategorized'
    title_lower = title.lower()
    for category, keywords in category_map.items():
        if any(re.search(r'\b' + re.escape(keyword) + r'\b', title_lower) for keyword in keywords):
            return category
    return 'Uncategorized'

df_videos['Category'] = df_videos['Video title'].apply(assign_category)
print("Category classification complete!")

df_videos[['Video title', 'Category']].head()

"""# 3. Panas Groupby"""

numeric_cols = ['Views', 'Watch time (hours)', 'Impressions click-through rate (%)']
for col in numeric_cols:
    df_videos[col] = pd.to_numeric(df_videos[col], errors='coerce')

category_summary = df_videos.groupby('Category').agg(
    Total_Views=('Views', 'sum'),
    Total_Watch_Time_Hours=('Watch time (hours)', 'sum'),
    Average_CTR_Percent=('Impressions click-through rate (%)', 'mean')
).reset_index()

category_summary

"""#4. Export to Google Spread Sheet"""

new_sheet_title = 'Portfolio_YouTube_Analysis'
new_spreadsheet = gc.create(new_sheet_title)

worksheet1 = new_spreadsheet.get_worksheet(0)
worksheet1.update_title('Categorized_Videos')
set_with_dataframe(worksheet1, df_videos)

worksheet2 = new_spreadsheet.add_worksheet(title="Category_Summary", rows="100", cols="20")
set_with_dataframe(worksheet2, category_summary)

print(f"URL: https://docs.google.com/spreadsheets/d/{new_spreadsheet.id}")